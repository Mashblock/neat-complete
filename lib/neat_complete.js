// Generated by CoffeeScript 1.3.1

/**
  * Copyright 2012 Able Technology
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
*/


(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if (window.NeatComplete == null) {
    window.NeatComplete = {};
  }

  /**
    * Compiled from src/helpers.coffee
  */


  NeatComplete.addDomEvent = function(elem, event, fn) {
    if (elem.attachEvent != null) {
      elem["e" + event + fn] = fn;
      elem["" + event + fn] = function() {
        return elem["e" + event + fn](window.event);
      };
      return elem.attachEvent("on" + event, elem["" + event + fn]);
    } else {
      return elem.addEventListener(event, fn, false);
    }
  };

  if (window.NeatComplete == null) {
    window.NeatComplete = {};
  }

  /**
    * Compiled from src/result.coffee
  */


  NeatComplete._Result = (function() {

    _Result.name = '_Result';

    function _Result(service, options) {
      var _ref, _ref1, _ref2, _ref3;
      this.service = service;
      this.options = options;
      this.widget = this.service.widget;
      this.value = (_ref = this.options) != null ? _ref.value : void 0;
      this.score = ((_ref1 = this.options) != null ? _ref1.score : void 0) || 0;
      this.identifier = (_ref2 = this.options) != null ? _ref2.identifier : void 0;
      this.data = ((_ref3 = this.options) != null ? _ref3.data : void 0) || {};
    }

    _Result.prototype.render = function() {
      this.li = document.createElement("li");
      this.li.innerHTML = this.value;
      this.li.setAttribute("class", "nc_item");
      this.addEvents();
      return this.li;
    };

    _Result.prototype.addEvents = function() {
      var _this = this;
      NeatComplete.addDomEvent(this.li, "click", function(e) {
        _this.widget.selectHighlighted();
        if (e.preventDefault) {
          return e.preventDefault();
        } else {
          return e.returnValue = false;
        }
      });
      NeatComplete.addDomEvent(this.li, "mouseover", function() {
        return _this.highlight();
      });
      NeatComplete.addDomEvent(this.li, "mouseout", function() {
        return _this.unhighlight();
      });
      NeatComplete.addDomEvent(this.li, "mousedown", function() {
        return _this.widget.mouseDownOnSelect = true;
      });
      return NeatComplete.addDomEvent(this.li, "mouseup", function() {
        return _this.widget.mouseDownOnSelect = false;
      });
    };

    _Result.prototype.highlight = function() {
      var _ref;
      if ((_ref = this.widget.highlighted) != null) {
        _ref.unhighlight();
      }
      this.li.className = "" + this.li.className + " nc_hover";
      return this.widget.highlighted = this;
    };

    _Result.prototype.unhighlight = function() {
      this.widget.highlighted = null;
      return this.li.className = this.li.className.replace(new RegExp("nc_hover", "gi"), "");
    };

    return _Result;

  })();

  if (window.NeatComplete == null) {
    window.NeatComplete = {};
  }

  /**
    * Compiled from src/service.coffee
  */


  NeatComplete._Service = (function() {

    _Service.name = '_Service';

    function _Service(widget, name, search_fn, options) {
      var _this = this;
      this.widget = widget;
      this.name = name;
      this.search_fn = search_fn;
      this.options = options != null ? options : {};
      this._response = __bind(this._response, this);

      this.results = [];
      this.response = function(q, data) {
        return _this._response.apply(_this, arguments);
      };
    }

    _Service.prototype.search = function(q) {
      this.last_query = q;
      return this.search_fn(q, this.response);
    };

    _Service.prototype._response = function(q, data) {
      var datum, _i, _len;
      this.results = [];
      if (this.last_query === q) {
        this.results = [];
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          datum = data[_i];
          this.results.push(new NeatComplete._Result(this, datum));
        }
        if (typeof console !== "undefined" && console !== null) {
          console.log(this.results);
        }
        return this.widget.showResults();
      }
    };

    return _Service;

  })();

  if (window.NeatComplete == null) {
    window.NeatComplete = {};
  }

  /**
    * Compiled from src/widget.coffee
  */


  NeatComplete.Widget = (function() {

    Widget.name = 'Widget';

    Widget.prototype.max_results = 10;

    function Widget(element, options) {
      this.element = element;
      this.options = options != null ? options : {};
      if (typeof console !== "undefined" && console !== null) {
        console.log(this.element);
      }
      this.element.setAttribute('autocomplete', 'off');
      this.services = [];
      this._addListeners();
      this.output = document.createElement("ul");
      this.output.setAttribute("class", "nc_list");
      this._applyStyle("display", "none");
      this._applyStyle("position", "absolute");
      document.body.appendChild(this.output);
    }

    Widget.prototype.addService = function(name, search_function) {
      return this.services.push(new NeatComplete._Service(this, name, search_function));
    };

    Widget.prototype._addListeners = function() {
      var _this = this;
      NeatComplete.addDomEvent(this.element, "focus", function(e) {
        return _this.focused = true;
      });
      NeatComplete.addDomEvent(this.element, "keypress", function(e) {
        var keyCode;
        keyCode = e.which || e.keyCode;
        if (keyCode === 13) {
          if (_this.highlighted != null) {
            _this.selectHighlighted();
          }
          if (e.preventDefault) {
            e.preventDefault();
          } else {
            e.returnValue = false;
          }
          return false;
        }
      });
      NeatComplete.addDomEvent(this.element, "keydown", function(e) {
        var keyCode;
        keyCode = e.which || e.keyCode;
        switch (keyCode) {
          case 38:
            _this._moveHighlight(-1);
            return false;
          case 40:
            _this._moveHighlight(1);
            return false;
          case 9:
            if (_this._highlighted != null) {
              return _this._selectHighlighted();
            }
            break;
          case 27:
            return _this._hideResults();
          case 37:
          case 39:
          case 13:
            break;
          default:
            if (_this._timeout != null) {
              clearTimeout(_this._timeout);
            }
            return _this._timeout = setTimeout(function() {
              return _this._getSuggestions();
            }, 400);
        }
      });
      return NeatComplete.addDomEvent(this.element, "blur", function(e) {
        if (!_this.mouseDownOnSelect) {
          _this.focused = false;
          return _this._hideResults();
        }
      });
    };

    Widget.prototype._moveHighlight = function(step) {
      var current_index, _ref, _ref1;
      current_index = this.highlighted != null ? this.results.indexOf(this.highlighted) : -1;
      if ((_ref = this.highlighted) != null) {
        _ref.unhighlight();
      }
      current_index += step;
      if (current_index < -1) {
        current_index = this.results.length - 1;
      } else if (current_index >= this.results.length) {
        current_index = -1;
      }
      if ((_ref1 = this.results[current_index]) != null) {
        _ref1.highlight();
      }
      return this.element.value = this.highlighted != null ? this.highlighted.value : this._val;
    };

    Widget.prototype._getSuggestions = function() {
      var service, _i, _len, _ref, _results;
      this._val = this.element.value;
      if (this._val !== '') {
        _ref = this.services;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          service = _ref[_i];
          _results.push(service.search(this._val));
        }
        return _results;
      } else {
        return this._hideResults();
      }
    };

    Widget.prototype._applyStyle = function(attr, value) {
      return this.output.style[attr] = value;
    };

    Widget.prototype._getPosition = function() {
      var coords, el;
      el = this.element;
      coords = {
        top: el.offsetTop + el.offsetHeight,
        left: el.offsetLeft
      };
      while (el = el.offsetParent) {
        coords.top += el.offsetTop;
        coords.left += el.offsetLeft;
      }
      return coords;
    };

    Widget.prototype._hideResults = function() {
      var service, _i, _len, _ref, _results;
      this._applyStyle("display", "none");
      this.results = [];
      _ref = this.services;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        service = _ref[_i];
        _results.push(service.results = []);
      }
      return _results;
    };

    Widget.prototype._displayResults = function() {
      var coords;
      coords = this._getPosition();
      this._applyStyle("left", "" + coords.left + "px");
      this._applyStyle("top", "" + coords.top + "px");
      return this._applyStyle("display", "block");
    };

    Widget.prototype.showResults = function() {
      var result, service, _i, _j, _len, _len1, _ref, _ref1;
      this.results = [];
      this.output.innerHTML = "";
      _ref = this.services;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        service = _ref[_i];
        this.results = this.results.concat(service.results);
      }
      this.results = this.results.sort(function(a, b) {
        return b.score - a.score;
      });
      this.results = this.results.slice(0, (this.max_results - 1) + 1 || 9e9);
      _ref1 = this.results;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        result = _ref1[_j];
        this.output.appendChild(result.render());
      }
      if (this.results.length) {
        return this._displayResults();
      } else {
        return this._hideResults();
      }
    };

    Widget.prototype.selectHighlighted = function() {
      this.element.value = this.highlighted.value;
      return this._hideResults();
    };

    return Widget;

  })();

}).call(this);
