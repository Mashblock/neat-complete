// Generated by CoffeeScript 1.3.1

/**
  * Copyright 2012 Able Technology
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
*/


(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.NeatComplete || (window.NeatComplete = {});

  /**
    * Compiled from src/helpers.coffee
  */


  NeatComplete.addDomEvent = function(elem, event, fn) {
    if (elem.attachEvent != null) {
      elem["e" + event + fn] = fn;
      elem["" + event + fn] = function() {
        return elem["e" + event + fn](window.event);
      };
      return elem.attachEvent("on" + event, elem["" + event + fn]);
    } else {
      return elem.addEventListener(event, fn, false);
    }
  };

  window.NeatComplete || (window.NeatComplete = {});

  /**
    * Compiled from src/service.coffee
  */


  NeatComplete.Service = (function() {

    Service.name = 'Service';

    function Service(widget, name, search_fn, options) {
      var _this = this;
      this.widget = widget;
      this.name = name;
      this.search_fn = search_fn;
      this.options = options != null ? options : {};
      this._response = __bind(this._response, this);

      this.results = [];
      this.response = function(q, data) {
        return _this._response.apply(_this, arguments);
      };
    }

    Service.prototype.search = function(q) {
      this.last_query = q;
      return this.search_fn(q, this.response);
    };

    Service.prototype._response = function(q, data) {
      this.results = [];
      if (this.last_query === q) {
        this.results = data;
        return this.widget.showResults();
      }
    };

    return Service;

  })();

  window.NeatComplete || (window.NeatComplete = {});

  /**
    * Compiled from src/widget.coffee
  */


  NeatComplete.Widget = (function() {

    Widget.name = 'Widget';

    function Widget(element, options) {
      this.element = element;
      this.options = options != null ? options : {};
      if (typeof console !== "undefined" && console !== null) {
        console.log(this.element);
      }
      this.services = [];
      this._addListeners();
    }

    Widget.prototype.addService = function(name, search_function) {
      return this.services.push(new NeatComplete.Service(this, name, search_function));
    };

    Widget.prototype._addListeners = function() {
      var _this = this;
      NeatComplete.addDomEvent(this.element, "keypress", function(e) {
        var keyCode;
        keyCode = e.which || e.keyCode;
        if (keyCode === 13) {
          _this.selectHighlighted();
          if (e.preventDefault) {
            e.preventDefault();
          } else {
            e.returnValue = false;
          }
          return false;
        }
      });
      return NeatComplete.addDomEvent(this.element, "keydown", function(e) {
        var keyCode;
        keyCode = e.which || e.keyCode;
        switch (keyCode) {
          case 38:
            _this._moveHighlight(-1);
            return false;
          case 40:
            _this._moveHighlight(1);
            return false;
          case 9:
            if (_this._highlighted != null) {
              return _this._selectHighlighted();
            }
            break;
          case 27:
            return _this._removeSuggestions();
          case 37:
          case 39:
          case 13:
            break;
          default:
            if (_this._timeout != null) {
              clearTimeout(_this._timeout);
            }
            return _this._timeout = setTimeout(function() {
              return _this._getSuggestions();
            }, 400);
        }
      });
    };

    Widget.prototype._moveHighlight = function(step) {
      return typeof console !== "undefined" && console !== null ? console.log("Stepped: " + step) : void 0;
    };

    Widget.prototype._selectHighlighted = function() {
      return typeof console !== "undefined" && console !== null ? console.log("Selected") : void 0;
    };

    Widget.prototype._getSuggestions = function() {
      this._val = this.element.value;
      return typeof console !== "undefined" && console !== null ? console.log(this._val) : void 0;
    };

    return Widget;

  })();

}).call(this);
